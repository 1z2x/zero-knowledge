#!/usr/bin/python3
import socket
import _thread
import numpy
graph_size = 10

def recive_graph():
    msg = s.recv(1024)
    H = numpy.frombuffer(msg)
    return H.reshape((graph_size, graph_size))

def check_isomorphism(G, H, p):
    G1 = G[:, p]
    G = G1[p, :]

    print(G)
    print(H)
    print(p)
    if numpy.array_equal(G, H):
        return True
    else:
        return False

def check_cycle(H, C):
    print(C)
    for j in range(0, graph_size):
        for i in range(0, graph_size):
            if C[j, i] == 1 and H[j, i] == 0:
                return False

    vert = numpy.array([0])
    k = numpy.where(C[0, :] == 1)[0]
    while len(vert) < graph_size:
        if k[0] not in vert:
            vert = numpy.append(vert, k[0])
            k = numpy.where(C[k[0], :] == 1)[0]
        elif k[1] not in vert:
            vert = numpy.append(vert, k[1])
            k = numpy.where(C[k[1], :] == 1)[0]
        else:
            break
    print('cykl ' + str(vert))
        
    if len(vert) == graph_size:
        return True
    else:
        return False 
            
s = socket.socket()
host = '127.0.0.1'
port = 5000
s.connect((host, port))

G = recive_graph()

command = ''
while command != 'end':
    H = recive_graph()
    command = input('> ')
    s.send(bytes(command, encoding='utf-8'))
    if command == 'iso':
        msg = s.recv(1024)
        p = numpy.frombuffer(msg, dtype=int)
        print(check_isomorphism(G, H, p))
    elif command == 'cykl':
        C = recive_graph()
        print(check_cycle(H, C))
#_thread.start_new_thread(recive_message, ())
#_thread.start_new_thread(send_message, ())

while 1:
    pass

