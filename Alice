#!/usr/bin/python3
import socket
import _thread
import numpy
import random
import time
graph_size = 10
original_cycle = numpy.zeros((graph_size, graph_size))
cycle = numpy.zeros((graph_size, graph_size))
permutation = numpy.zeros((graph_size))
G = numpy.zeros((graph_size, graph_size))
H = numpy.zeros((graph_size, graph_size))

def send_message():
	conn.send(bytes(G))

def init_graph():
	G = numpy.zeros((graph_size, graph_size))
	G[0, 1] = 1
	G[0, graph_size - 1] = 1
	G[graph_size - 1, 0] = 1
	G[graph_size - 1, graph_size - 2] = 1
	for i in range(1, graph_size - 1):
		G[i, i - 1] = 1
		G[i, i + 1] = 1

	p = numpy.array(random.sample(range(graph_size), graph_size))
	G1 = G[:, p]
	G = G1[p, :]
	global original_cycle
	original_cycle = numpy.copy(G)

	for i in range(0, graph_size - 1):
		for j in range(i + 1, graph_size - 1):
			if random.randint(0, 1) == 1 and G[i, j] == 0:
				G[i, j] = 1
				G[j, i] = 1
	return G

def gen_isomorphism(G):
    print(G)
    print()
    p = numpy.array(random.sample(range(graph_size), graph_size))
    G1 = G[:, p]
    G = G1[p, :]
    global cycle
    C = original_cycle[:, p]
    cycle = C[p, :]
    global permutation
    permutation = p
    print(G)
    print()
    print(permutation)
    return G

G = init_graph()

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
host = '127.0.0.1'
s.bind((host, 5000))
s.listen(1)
conn, addr = s.accept()

conn.send(bytes(G))
time.sleep(1)


while True:
    H = gen_isomorphism(G)
    conn.send(bytes(H))
    msg = conn.recv(50).decode('utf-8')
    if msg == "iso":
        conn.send(bytes(permutation))
    elif msg == "cykl":
        conn.send(bytes(cycle))
    else:
        break


#_thread.start_new_thread(recive_message, ())
#_thread.start_new_thread(send_message, ())

while 1:
	pass
conn.close()

